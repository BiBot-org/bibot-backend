version: "3.8"
services:
  redis:
    image: redis:alpine
    command: redis-server --port 6379
    container_name: code_recipe_redis
    hostname: code_recipe_redis
    labels:
      - "name=redis"
      - "mode=standalone"
    ports:
      - "6379:6379"
    networks:
      - code_recipe

  zookeeper:
    image: wurstmeister/zookeeper
    container_name: code_recipe_zookeeper
    restart: always
    ports:
      - "2181:2181"
    networks:
      code_recipe:
        aliases:
          - "zookeeper"
  kafka:
    image: wurstmeister/kafka
    container_name: code_recipe_kafka
    restart: always
    ports:
      - "9092:9092"
    environment:
      KAFKA_ADVERTISED_HOST_NAME: kafka
      KAFKA_ADVERTISED_PORT: 9092
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_CREATE_TOPICS: payment_success:1:1
      KAFKA_LISTENERS: LISTENER_BOB://kafka:29092,LISTENER_FRED://kafka:9092
      KAFKA_ADVERTISED_LISTENERS: LISTENER_BOB://kafka:29092,LISTENER_FRED://kafka:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: LISTENER_BOB:PLAINTEXT,LISTENER_FRED:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: LISTENER_BOB
      KAFKA_DELETE_TOPIC_ENABLE: "true"
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    depends_on:
      - zookeeper
    networks:
      code_recipe:
        aliases:
          - "kafka"
  kafka-ui:
    image: provectuslabs/kafka-ui:0.2.1
    container_name: code_recipe_kafka_ui
    ports:
      - "8079:8080"
    environment:
      - KAFKA_CLUSTERS_0_NAME=localhost
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:9092
      - KAFKA_CLUSTERS_0_ZOOKEEPER=zookeeper:2181
    depends_on:
      - kafka
    networks:
      code_recipe:
        aliases:
          - "kafka-ui"

  receiptservice:
    image: "swj1265/receipt-service:0.0.1-SNAPSHOT"
    container_name: code_recipe_receipt_service
    ports:
      - "8082:8082"
    depends_on:
      redis:
        condition: service_started
    networks:
      - code_recipe

  userservice:
    image: "swj1265/user-service:0.0.1-SNAPSHOT"
    container_name: code_recipe_user_service
    ports:
      - "8081:8081"
    depends_on:
      redis:
        condition: service_started

  cardservice:
    image: "swj1265/card-service:0.0.1-SNAPSHOT"
    container_name: code_recipe_card_service
    ports:
      - "8084:8084"
    depends_on:
      redis:
        condition: service_started
    networks:
      - code_recipe

  expenseservice:
    image: "swj1265/expense-service:0.0.1-SNAPSHOT"
    container_name: code_recipe_expense_service
    ports:
      - "8083:8083"
    depends_on:
      redis:
        condition: service_started
    networks:
      - code_recipe



networks:
  code_recipe:
    driver: bridge
